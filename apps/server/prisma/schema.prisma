generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum HostRole {
  local
  remote
}

enum SshAuthMethod {
  password
  privateKey
}

model AppSetting {
  key   String @id
  value String
}

model Host {
  id                      String                @id @default(cuid())
  name                    String
  address                 String
  sshUser                 String
  port                    Int?
  tags                    String[]
  sshOptions              Json?
  sshAuthMethod           SshAuthMethod         @default(password)
  sshPassword             String?
  sshPrivateKey           String?
  sshPrivateKeyPassphrase String?
  role                    HostRole              @default(local)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  containers              Container[]
  operationLogEntries     OperationLogEntry[]
}

// 统一的系统日志表（用于替代内存缓冲区）
model SystemLog {
  id        String   @id @default(cuid())
  ts        DateTime @default(now())
  category  String   // 'container' | 'application' | 'system' | 'security'
  level     String   // 'info' | 'warn' | 'error' | 'debug'
  stream    String   // 'stdout' | 'stderr' | 'system'
  source    String?  // 'server' | 'containers' | 'console' | hostId
  hostId    String?  // 关联主机（可选）
  hostLabel String?  // 主机显示名（可选）
  content   String   // 日志内容
  metadata  Json?    // 扩展字段 {containerId, operation, exitCode, etc}
  @@index([category, ts])
  @@index([hostId, ts])
  @@index([source, ts])
  @@index([ts]) // 全局时间索引
}

// Containers and related
model Container {
  id                  String    @id @default(cuid())
  hostId              String
  containerId         String
  name                String
  state               String?
  status              String?
  restartCount        Int?
  imageName           String?
  imageTag            String?
  repoDigest          String?
  remoteDigest        String?
  updateAvailable     Boolean   @default(false)
  updateCheckedAt     DateTime?
  createdAt           DateTime  @default(now())
  startedAt           DateTime?
  isComposeManaged    Boolean   @default(false)
  composeProject      String?
  composeService      String?
  composeWorkingDir   String?
  // Derived grouping helpers
  composeGroupKey     String?
  composeFolderName   String?
  composeConfigFiles  Json?
  runCommand          String?
  ports               Json?
  mounts              Json?
  networks            Json?
  labels              Json?
  manualPortMapping   Json?
  host                Host      @relation(fields: [hostId], references: [id], onDelete: Cascade)
  @@unique([hostId, containerId])
  @@index([hostId, composeGroupKey])
}

model ReverseProxyRoute {
  id                    String    @id @default(cuid())
  hostId                String
  provider              String // "npm"
  type                  String // http/stream/redirect
  domain                String
  forwardHost           String?
  forwardPort           Int?
  enabled               Boolean   @default(true)
  certificateId         String?
  certExpiresAt         DateTime?
  sslForced             Boolean   @default(false)
  hstsEnabled           Boolean   @default(false)
  hstsSubdomains        Boolean   @default(false)
  http2Support          Boolean   @default(false)
  allowWebsocketUpgrade Boolean   @default(false)
  blockExploits         Boolean   @default(false)
  cachingEnabled        Boolean   @default(false)
  lastSyncedAt          DateTime?
  @@unique([hostId, domain])
}

model Certificate {
  id           String   @id @default(cuid())
  provider     String
  cn           String
  sans         String[]
  issuer       String?
  notBefore    DateTime?
  notAfter     DateTime?
  autoRenew    Boolean  @default(true)
  lastSyncedAt DateTime?
  createdAt    DateTime @default(now())
}

model HostNpmConfig {
  hostId               String   @id
  enabled              Boolean  @default(false)
  dbType               String   @default("sqlite") // sqlite | mysql
  connectionMode       String   @default("container-local")
  containerName        String?
  sqlitePath           String?  @default("/data/database.sqlite")
  mysqlUseContainerEnv Boolean? @default(false)
  updatedAt            DateTime @updatedAt
}

// Optional: docker-compose projects indexed separately
model ComposeProject {
  id                  String   @id @default(cuid())
  project             String
  workingDir          String
  configFiles         String[]
  effectiveConfigHash String?
  lastSyncedAt        DateTime?
}

model FrpsConfig {
  id             String      @id @default(cuid())
  hostId         String
  containerId    String
  bindPort       Int?
  vhostHttpPort  Int?
  vhostHttpsPort Int?
  subdomainHost  String?
  rawConfig      Json?
  lastSyncedAt   DateTime?
  proxies        FrpcProxy[]
}

model FrpcProxy {
  id            String     @id @default(cuid())
  hostId        String
  containerId   String
  frpsConfigId  String
  name          String
  type          String
  localIp       String
  localPort     Int
  remotePort    Int
  subdomain     String?
  customDomains String[]
  rawConfig     Json?
  lastSyncedAt  DateTime?
  frps          FrpsConfig @relation(fields: [frpsConfigId], references: [id], onDelete: Cascade)
}

// Main table for any user or system-initiated operation
model OperationLog {
  id             String              @id @default(cuid())
  title          String // User-friendly title, e.g., "Discover Containers on Finonas"
  status         OperationStatus     @default(PENDING) // More detailed status
  // What triggered this operation?
  triggerType    TriggerType         @default(USER)
  triggerContext Json? // Context about the trigger, e.g., { "userId": "...", "ip": "..." } or { "schedule": "daily-cleanup" }
  // What is this operation about?
  context        Json? // Context about the operation itself, e.g., { "command": "ls -la", "targets": ["hostId1"] } or { "containerId": "...", "action": "restart" }
  startTime      DateTime            @default(now())
  endTime        DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  // Relation to its detailed log entries
  entries        OperationLogEntry[]
}

// A single log line/entry related to an OperationLog
model OperationLogEntry {
  id             String       @id @default(cuid())
  timestamp      DateTime     @default(now())
  stream         String // 'stdout', 'stderr', 'system', 'info', 'error'
  content        String       @db.Text
  // Relation to the parent OperationLog
  operationLog   OperationLog @relation(fields: [operationLogId], references: [id], onDelete: Cascade)
  operationLogId String
  // Optional relation to a specific host
  host           Host?        @relation(fields: [hostId], references: [id], onDelete: SetNull)
  hostId         String?
}

enum OperationStatus {
  PENDING // Created, but not yet picked up by a worker
  RUNNING // Actively being executed
  COMPLETED // Finished successfully
  ERROR // Finished with errors
  CANCELLED // Cancelled by a user or system
}

enum TriggerType {
  USER // Initiated by a human user via the UI/API
  SCHEDULE // Initiated by a scheduled job (cron)
  WEBHOOK // Initiated by an external webhook
  SYSTEM // Initiated by an internal system event (e.g., post-discovery tasks)
}

// Definition of a scheduled task
model ScheduledTask {
  id          String    @id @default(cuid())
  name        String    @unique // User-friendly name, e.g., "Daily Container Update Check"
  description String?
  taskType    String // Task type identifier, e.g., "EXEC_COMMAND", "CHECK_CONTAINER_UPDATES"
  taskPayload Json? // Parameters for the task, e.g., { "command": "docker system prune -af", "targets": ["hostId1"] }
  cron        String // CRON expression for scheduling, e.g., "0 3 * * *"
  isEnabled   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastRunAt   DateTime?
  nextRunAt   DateTime?
}

